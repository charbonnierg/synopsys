"use strict";(self.webpackChunksynopsys_documentation=self.webpackChunksynopsys_documentation||[]).push([[2909],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(a),p=r,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||s;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const s={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),s=a(6010),l=a(2466),o=a(6550),i=a(1980),u=a(7392),c=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,s=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[i,u]=h({queryString:a,groupId:n}),[d,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:n}),g=(()=>{const e=i??d;return p({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,s]),tabValues:s}}var g=a(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:a,selectedValue:o,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==o&&(d(t),i(n))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},l,{className:(0,s.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function N(e){const t=b(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",f.tabList)},r.createElement(k,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return r.createElement(N,(0,n.Z)({key:String(t)},e))}},786:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),s=a(4866),l=a(5162);const o={sidebar_position:4,description:"Pull channel messages in order"},i="Consumers",u={unversionedId:"tutorials/basics/create-consumer",id:"tutorials/basics/create-consumer",title:"Consumers",description:"Pull channel messages in order",source:"@site/docs/tutorials/basics/create-consumer.mdx",sourceDirName:"tutorials/basics",slug:"/tutorials/basics/create-consumer",permalink:"/synopsys/docs/tutorials/basics/create-consumer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/basics/create-consumer.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Pull channel messages in order"},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/synopsys/docs/tutorials/basics/create-service"},next:{title:"Flows",permalink:"/synopsys/docs/tutorials/basics/create-flows"}},c={},d=[{value:"Definition",id:"definition",level:2},{value:"Fields",id:"fields",level:3},{value:"Create a consumer",id:"create-a-consumer",level:2},{value:"Define a handler",id:"define-a-handler",level:3},{value:"Create consumer",id:"create-consumer",level:3},{value:"Standalone usage",id:"standalone-usage",level:3},{value:"Dynamic consumers",id:"dynamic-consumers",level:3}],m={toc:d},p="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"consumers"},"Consumers"),(0,r.kt)("p",null,"Previously, we ",(0,r.kt)("a",{parentName:"p",href:"/synopsys/docs/tutorials/basics/create-subscriber"},"created a susbcriber"),", however, as it was discussed, subscribers do not guarantee that messages are always received, and do not guarantee that messages are processed in order."),(0,r.kt)("p",null,"Consumers are used when processing messages in order is a requirement, or when all messages must be delivered at least once."),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("admonition",{title:"What is a consumer",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A consumer is a ",(0,r.kt)("strong",{parentName:"p"},"stateful view")," of a channel. It acts as interface for clients to consume a ",(0,r.kt)("strong",{parentName:"p"},"subset of messages")," published in a channel and will keep track of which messages were delivered and ",(0,r.kt)("strong",{parentName:"p"},"acknowledged"),".")),(0,r.kt)("p",null,"Unlike subscribers or services, messages delivered by consumers ",(0,r.kt)("strong",{parentName:"p"},"must be acknowledged")," before a configured timeout. If messages are not acknowledged before timeout, they are redelivered."),(0,r.kt)("p",null,"Messages received by consumers are called ",(0,r.kt)("strong",{parentName:"p"},"Orders"),"."),(0,r.kt)("admonition",{title:"Types of messages until now",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Subscribers receive ",(0,r.kt)("strong",{parentName:"li"},"Messages")),(0,r.kt)("li",{parentName:"ul"},"Services receive ",(0,r.kt)("strong",{parentName:"li"},"Requests")),(0,r.kt)("li",{parentName:"ul"},"Consumers receive ",(0,r.kt)("strong",{parentName:"li"},"Orders")))),(0,r.kt)("p",null,"Each job can be acknowledged in 3 different ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ACK"),": Indicate that order was processed and ",(0,r.kt)("strong",{parentName:"li"},"MUST NOT")," be redelivered."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NACK"),": Indicate that order was not processed and ",(0,r.kt)("strong",{parentName:"li"},"MUST")," be redelivered."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"TERM"),": Indicate that order was not processed and ",(0,r.kt)("strong",{parentName:"li"},"MUST NOT")," be redelivered."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"INPROGRESS"),": Indicate that order is being processed and ",(0,r.kt)("strong",{parentName:"li"},"SHOULD NOT")," be redelivered yet.")),(0,r.kt)("h3",{id:"fields"},"Fields"),(0,r.kt)("p",null,"A consumer defines the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the consumer. In practice, this is the name of an ",(0,r.kt)("strong",{parentName:"td"},"operation"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Channel"),(0,r.kt)("td",{parentName:"tr",align:null},"The channel delivering orders to the consumer."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Handler"),(0,r.kt)("td",{parentName:"tr",align:null},"A function to execute each time an order is received. This function is responsible for acknowledging the order. In python, handlers must be coroutine functions returning ",(0,r.kt)("inlineCode",{parentName:"td"},"None"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Max Ack Waiting"),(0,r.kt)("td",{parentName:"tr",align:null},"Duration to wait for an acknowledgement after an order has been delivered before redelivering the message"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"30s"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Max Ack Pending"),(0,r.kt)("td",{parentName:"tr",align:null},"When maximum number of pending acknowledgement is reached, orders are not delivered until an already delivered order is acknowledged or expired. Set this value to ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," (the default) in order to process messages in order."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Max Deliver"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum number of times an order can be delivered before being discarded. Set this value to ",(0,r.kt)("inlineCode",{parentName:"td"},"0")," in order to always redeliver messages."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"5")))),(0,r.kt)("h2",{id:"create-a-consumer"},"Create a consumer"),(0,r.kt)("p",null,"Let's create a consumer persisting measurements data. Because a channel already defines the measurement messages, it is not needed to create a new channel."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Subscribers and consumers are not exclusive. It's possible to create as many subscribers and as many consumers as desired on a single channel.")),(0,r.kt)("admonition",{title:"Recap",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Channel has been defined using the following python code:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'MEASURES = create_channel(\n    name="measures",\n    address="locations/{location}/devices/{device_id}/sensors/{sensor_id}/measure",\n    parameters=MeasureParameters,\n    schema=MeasureData,\n)\n'))),(0,r.kt)("h3",{id:"define-a-handler"},"Define a handler"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# highlight-next-line\nfrom synopsys import Job\n# highlight-next-line\nfrom .definitions import MeasureData, MeasureParameters\n\n\n# highlight-next-line\nasync def handler(job: Job[MeasureData, MeasureParameters]) -> None:\n    """Process messages delivered to subscriber."""\n    params = job.parameters\n    measurement = job.data\n    print(f"[{params.location}] - Device {params.device_id} - Sensor {params.sensor_id}: {measurement.value}")\n    # Let\'s imagine that we persist the data here\n    # ...\n    # Acknowledge the job\n    # highlight-next-line\n    await job.ack()\n')),(0,r.kt)("admonition",{title:"Handler signature",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A python consumer handler must accept a ",(0,r.kt)("inlineCode",{parentName:"p"},"Job[DataT, ParamsT]")," as arguments, where ",(0,r.kt)("inlineCode",{parentName:"p"},"DataT")," is the payload schema of consumer channel, and ",(0,r.kt)("inlineCode",{parentName:"p"},"ParamsT")," is the parameters schema of consumer channel."),(0,r.kt)("p",{parentName:"admonition"},"If consumer requires dependencies, such as a database connection, or an HTTP client, handlers can be created as callable classes:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class SomeDatabaseClient:\n    """A fake database client."""\n    pass\n\n\nclass HandlerWithDependencies:\n    def __init__(self, database: SomeDatabaseClient) -> None:\n        """Create a new handler."""\n        self.db = database\n\n    async def __call__(self, job: Job[MeasureData, MeasureParameters]) -> None:\n        """Execute handler, which relies on a database connection."""\n        # Do something with the job data and the database\n        # await self.db.update(...)\n'))))),(0,r.kt)("h3",{id:"create-consumer"},"Create consumer"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# highlight-next-line\nfrom synopsys import Consumer\nfrom .channels import MEASUREMENTS\n\n\nMEASUREMENTS_CONSUMER = Consumer(\n    name="persist-measurements",\n    channel=MEASUREMENTS,\n    handler=handler,\n    max_ack_waiting=1,\n    max_deliver=10,\n)\n')))),(0,r.kt)("h3",{id:"standalone-usage"},"Standalone usage"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom .actors import MEASUREMENTS_CONSUMER\n\n\nasync def run() -> None:\n    async with create_bus("nats://localhost:4222") as bus:\n        # highlight-next-line\n        await bus.register_consumer(MEASUREMENTS_CONSUMER)\n')))),(0,r.kt)("p",null,"The function above will run until bus or channel is closed. When using PubSub backend with support for automatic reconnections (such as NATS), the function above runs ",(0,r.kt)("em",{parentName:"p"},"forever")," (I.E, until external cancellation or failure)."),(0,r.kt)("h3",{id:"dynamic-consumers"},"Dynamic consumers"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom .actors import MEASUREMENTS_CONSUMER\n\nasync def main() -> None:\n    async with create_bus("nats://localhost:4222") as bus:\n        # highlight-next-line\n        consumer = await bus.register_consumer(MEASUREMENTS_CONSUMER)\n        # Do something\n        # ...\n        # Stop the consumer\n        # highlight-next-line\n        await consumer.stop()\n')))))}h.isMDXComponent=!0}}]);