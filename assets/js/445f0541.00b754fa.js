"use strict";(self.webpackChunksynopsys_documentation=self.webpackChunksynopsys_documentation||[]).push([[8910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=s,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(b,o(o({ref:t},c),{},{components:n})):a.createElement(b,o({ref:t},c))}));function b(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),s=n(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),s=n(7294),r=n(6010),o=n(2466),l=n(6550),i=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}function d(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[o,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[i,u]=b({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),f=(()=>{const e=i??p;return m({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,r.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=h(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},s.createElement(g,(0,a.Z)({},e,t)),s.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return s.createElement(k,(0,a.Z)({key:String(t)},e))}},6119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(7462),s=(n(7294),n(3905)),r=n(4866),o=n(5162);const l={sidebar_position:2,description:"Create a bus to publish messages"},i="Bus",u={unversionedId:"tutorials/basics/create-bus",id:"tutorials/basics/create-bus",title:"Bus",description:"Create a bus to publish messages",source:"@site/docs/tutorials/basics/create-bus.mdx",sourceDirName:"tutorials/basics",slug:"/tutorials/basics/create-bus",permalink:"/synopsys/docs/tutorials/basics/create-bus",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/basics/create-bus.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Create a bus to publish messages"},sidebar:"tutorialSidebar",previous:{title:"Channels",permalink:"/synopsys/docs/tutorials/basics/create-channel"},next:{title:"Subscribers",permalink:"/synopsys/docs/tutorials/basics/create-subscriber"}},c={},p=[{value:"Definition",id:"definition",level:2},{value:"Create a bus",id:"create-a-bus",level:2},{value:"Publish messages to a channel",id:"publish-messages-to-a-channel",level:2},{value:"Connected channels",id:"connected-channels",level:2}],d={toc:p},m="wrapper";function b(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"bus"},"Bus"),(0,s.kt)("p",null,"In order to send messages to channel (or receive messages from channels), a ",(0,s.kt)("inlineCode",{parentName:"p"},"Bus")," must be used."),(0,s.kt)("h2",{id:"definition"},"Definition"),(0,s.kt)("admonition",{title:"What is a bus ?",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"A bus is a software component responsible for connecting to remote messaging systems, publishing messages on channels, and delivering messages to actors (such as subscribers, services or consumers, which are explained in next steps)")),(0,s.kt)("p",null,"A bus relies on an interface, called a ",(0,s.kt)("inlineCode",{parentName:"p"},"PubSubBackend")," in order to connect to remote messaging systems."),(0,s.kt)("admonition",{title:"Bus is agnostic to protocol",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"In practice, when running your application, each bus uses a single ",(0,s.kt)("inlineCode",{parentName:"p"},"PubSubBackend"),". However, when writing library code or applications usecases,\ndevelopers do not need to know which backend will be used at runtime.")),(0,s.kt)("h2",{id:"create-a-bus"},"Create a bus"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"python-simple",label:"Python SDK (simple)",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"Create a backend with default configuration"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\n\n\n# Backend to use is identified from connection URL\nbus = create_bus("nats://localhost:4222")\n'))),(0,s.kt)(o.Z,{value:"python-advanced",label:"Python SDK (advanced)",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"Configure backend as needed and provide a backend instance directly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom synopsys.adapters.pubsub.nats import NATSPubSub\n\n\nbus = create_bus(\n    # Provide custom PubSubBackend instance\n    NATSPubSub(\n        servers=[\n            "nats://localhost:4222",\n            "nats://localhost:4223",\n        ]\n    )\n)\n')))),(0,s.kt)("h2",{id:"publish-messages-to-a-channel"},"Publish messages to a channel"),(0,s.kt)("p",null,"Even though in this tutorial we assume that messages are published by an external system,\nit can be useful to publish messages during tests."),(0,s.kt)("p",null,"Now that ",(0,s.kt)("a",{parentName:"p",href:"/synopsys/docs/tutorials/basics/create-channel"},(0,s.kt)("inlineCode",{parentName:"a"},"MEASUREMENTS")," channel has been created"),", it is easy to publish messages using a bus:"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\n# highlight-next-line\nfrom .channels import MEASUREMENTS\n\n\nasync def example() -> None:\n    """A function which publish a message."""\n    # Start a bus as a context manager\n    async with create_bus("nats://localhost:4222") as bus:\n        # Publish a message on the MEASUREMENTS channel\n        await bus.publish(\n            # highlight-start\n            channel=MEASUREMENTS,\n            parameters=MeasureParameters(\n                location="test-location",\n                device="test-device",\n                sensor="test-sensor",\n            ),\n            data=MeasureData(\n                value=12.3,\n                timestamp=1679609383,\n            ),\n            # highlight-end \n        )\n')),(0,s.kt)("admonition",{title:"Key Takeaways",type:"tip"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"A message must be published ",(0,s.kt)("strong",{parentName:"li"},"on a channel")),(0,s.kt)("li",{parentName:"ul"},"A message ",(0,s.kt)("strong",{parentName:"li"},"must")," have data of type indicated in channel schema"),(0,s.kt)("li",{parentName:"ul"},"A message ",(0,s.kt)("strong",{parentName:"li"},"must")," have parameters of types indicated in channel parameters schema")),(0,s.kt)("p",{parentName:"admonition"},"Bonus: ",(0,s.kt)("a",{parentName:"p",href:"https://mypy.readthedocs.io/en/stable/"},(0,s.kt)("inlineCode",{parentName:"a"},"mypy"))," can be used to type check publish calls \ud83c\udf89")))),(0,s.kt)("h2",{id:"connected-channels"},"Connected channels"),(0,s.kt)("p",null,"Rather than always specifying which channel message should be published to, it's possible to ",(0,s.kt)("em",{parentName:"p"},"connect channels"),":"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom .channels import MEASUREMENTS\n\nasync with create_bus("nats://localhost:4222") as bus:\n    # Obtain a connected channel\n    # highlight-next-line\n    async with bus.connect_channel(MEASUREMENTS) as channel:\n        # It\'s now possible to publish without indicating channel\n        # highlight-start\n        await channel.publish(\n            parameters=MeasureParameters(\n                location="test-location",\n                device="test-device",\n                sensor="test-sensor",\n            ),\n            data=MeasureData(\n                value=12.3,\n                timestamp=1679609383,\n            ),\n        )\n        # highlight-end\n')))))}b.isMDXComponent=!0}}]);