"use strict";(self.webpackChunksynopsys_documentation=self.webpackChunksynopsys_documentation||[]).push([[5927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),s=n(6010),i=n(2466),l=n(6550),o=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[o,c]=h({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),f=(()=>{const e=o??d;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),b(e)}),[c,b,s]),tabValues:s}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==l&&(d(t),o(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},i,{className:(0,s.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=b(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",y.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},5021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),s=n(4866),i=n(5162);const l={sidebar_position:3,description:"Listen to channel messages and reply"},o="Services",c={unversionedId:"tutorials/basics/create-service",id:"tutorials/basics/create-service",title:"Services",description:"Listen to channel messages and reply",source:"@site/docs/tutorials/basics/create-service.mdx",sourceDirName:"tutorials/basics",slug:"/tutorials/basics/create-service",permalink:"/synopsys/docs/tutorials/basics/create-service",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/basics/create-service.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Listen to channel messages and reply"},sidebar:"tutorialSidebar",previous:{title:"Subscribers",permalink:"/synopsys/docs/tutorials/basics/create-subscriber"},next:{title:"Consumers",permalink:"/synopsys/docs/tutorials/basics/create-consumer"}},u={},d=[{value:"Definition",id:"definition",level:2},{value:"Fields",id:"fields",level:3},{value:"Create a service",id:"create-a-service",level:2},{value:"Create a channel",id:"create-a-channel",level:3},{value:"Define a handler",id:"define-a-handler",level:3},{value:"Create the service",id:"create-the-service",level:3},{value:"Standalone usage",id:"standalone-usage",level:3},{value:"Dynamic services",id:"dynamic-services",level:3}],p={toc:d},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"services"},"Services"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/synopsys/docs/tutorials/basics/create-channel"},(0,r.kt)("strong",{parentName:"a"},"channel defined previously"))," does not define a reply schema. Let's create a new channel, with a reply schema, in order to create a service."),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("admonition",{title:"What is a service ?",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A service is a specific kind of subscriber, which listens messages on a particual channel and send back replies to message producer.")),(0,r.kt)("p",null,"Just like any other subscribers, a service is associated with a particular\nchannel, however services channels must ",(0,r.kt)("strong",{parentName:"p"},"always define a reply schema"),"."),(0,r.kt)("p",null,"Messages received by services are called ",(0,r.kt)("strong",{parentName:"p"},"requests"),", and messages sent back by services are called ",(0,r.kt)("strong",{parentName:"p"},"replies"),"."),(0,r.kt)("admonition",{title:"Comparison with HTTP",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Services are very similar to HTTP endpoints. Just like them, they receive requests and send back responses. However, ",(0,r.kt)("inlineCode",{parentName:"p"},"replies")," do not have concept such as status code, it's up to application developers to describe success or failure through payload or headers.")),(0,r.kt)("h3",{id:"fields"},"Fields"),(0,r.kt)("p",null,"A service defines the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the service. In practice, this is the name of a ",(0,r.kt)("strong",{parentName:"td"},"command")," or a ",(0,r.kt)("strong",{parentName:"td"},"query"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Channel"),(0,r.kt)("td",{parentName:"tr",align:null},"The channel delivering messages to the service. A service channel is annotated using ",(0,r.kt)("inlineCode",{parentName:"td"},"DataT"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ParamsT"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ReplyT"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Handler"),(0,r.kt)("td",{parentName:"tr",align:null},"A function to execute each time a request is received. This function must return either the ",(0,r.kt)("strong",{parentName:"td"},"reply")," to send back to message producer, or some object of type ",(0,r.kt)("inlineCode",{parentName:"td"},"ReplyT")," which whill be sent back within reply. In python, handlers must be coroutine functions returning a ",(0,r.kt)("inlineCode",{parentName:"td"},"Reply")," object."),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83e\udde8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Queue"),(0,r.kt)("td",{parentName:"tr",align:null},"When several services are started on the same channel, each message is delivered to a single subscriber within each queue. When no queue is specified, subscriber receives all messages."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))))),(0,r.kt)("h2",{id:"create-a-service"},"Create a service"),(0,r.kt)("p",null,"Let's create a very simple service which returns the allowed list of locations. It could be used by clients wishing to publish messages in order to verify that their configured location is valid."),(0,r.kt)("p",null,"It should not accept paremeters or request body, and it should return a list of locations as strings."),(0,r.kt)("h3",{id:"create-a-channel"},"Create a channel"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import typing as t\nfrom synopsys import create_channel\n\n\nLOCATIONS = create_channel(\n    name="query-locations",\n    address="query/locations",\n    reply_schema=t.List[str],\n)\n')))),(0,r.kt)("h3",{id:"define-a-handler"},"Define a handler"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# highlight-next-line\nfrom synopsys import Request\n# highlight-next-line\n\n\n# highlight-next-line\nasync def handler(msg: Request[None, None, t.List[str]]) -> t.List[str]:\n    """Returns a list of allowed locations for sensors measurements."""\n    return ["paris", "grenoble", "test-location"]\n')),(0,r.kt)("admonition",{title:"Handler signature",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A python service handler must accept a ",(0,r.kt)("inlineCode",{parentName:"p"},"Request[DataT, ParamsT, ReplyT]")," as arguments, where:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DataT")," is the payload schema of service channel"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ParamsT")," is the parameters schema of service channel."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReplyT")," is the reply schema of service channel.")),(0,r.kt)("p",{parentName:"admonition"},"In the example above, the handler accepts a ",(0,r.kt)("inlineCode",{parentName:"p"},"Request[None, None, t.List[str]]")," because channel does not define a payload schema and does not define parameters. Last annotation is ",(0,r.kt)("inlineCode",{parentName:"p"},"t.List[str]")," as defined in channel reply schema.\nLike subscribers, if a service requires dependencies, such as a database connection, or an HTTP client, handlers can be created as callable classes:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class SomeDatabaseClient:\n    """A fake database client."""\n    pass\n\n\nclass ServiceWithDependency:\n    def __init__(self, database: SomeDatabaseClient) -> None:\n        """Create a new handler."""\n        self.db = database\n\n    async def __call__(self, msg: Request[None, None, t.List[str]]) -> t.List[str]:\n        """Execute handler, which relies on a database connection."""\n        # Query the database and return a list of strings\n        # await self.db.query(...)\n        return ["test-location"]\n'))))),(0,r.kt)("h3",{id:"create-the-service"},"Create the service"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# highlight-next-line\nfrom synopsys import Service\nfrom .channels import LOCATIONS\n\n\nLOCATIONS_SERVICE = Subscriber(\n    name="locations-service",\n    channel=LOCATIONS,\n    handler=handler,\n)\n')))),(0,r.kt)("h3",{id:"standalone-usage"},"Standalone usage"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom .actors import LOCATIONS_SERVICE\n\n\nasync def main() -> None:\n    async with create_bus("nats://localhost:4222") as bus:\n        # highlight-next-line\n        await bus.register_service(LOCATIONS_SERVICE)\n\n\nif __name__ == "__main__":\n   # Run the main function and block until shutdown\n   import anyio\n   anyio.run(main)\n')))),(0,r.kt)("p",null,"The function above will run until bus or channel is closed. When using PubSub backend with support for automatic reconnections (such as NATS), the function above runs ",(0,r.kt)("em",{parentName:"p"},"forever")," (I.E, until external cancellation or failure)."),(0,r.kt)("h3",{id:"dynamic-services"},"Dynamic services"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",label:"Python SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synopsys import create_bus\nfrom .actors import LOCATIONS_SERVICE\n\n\nasync def main() -> None:\n    async with create_bus("nats://localhost:4222") as bus:\n        # highlight-next-line\n        service = await bus.register_service(LOCATIONS_SERVICE)\n        # Stop service when needed\n        # highlight-next-line\n        await service.stop()\n\n\nif __name__ == "__main__":\n   # Run the main function and block until shutdown\n   import anyio\n   anyio.run(main)\n')))))}h.isMDXComponent=!0}}]);